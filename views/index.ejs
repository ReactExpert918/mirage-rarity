<!doctype html>
<html lang="en" class="h-100">
  <head>
    <%- 
    include('./component/meta', {
      appTitle: appTitle, 
      appDescription: appDescription, 
      ogTitle: ogTitle, 
      ogDescription: ogDescription, 
      ogUrl: ogUrl, 
      ogImage: ogImage
    }); 
    -%>
  </head>
  <body class="index">
    <%- include('./component/header'); -%>
    <div class="container">
      <div class="matrixDescription">
        <div class="matrixDescriptionColor"></div>
        <div class="matrixDescriptionContent">
          <img src="images/back.png" />
          <div class="matrixDescriptionName">
            <p class="title">Genesis cactus</p>
            <div class="total">
              <span>Total:</span>
              <span><%= totalPunkCount %></span>
            </div>
            <div class="itemSocial">
              <img src="images/discord.svg">
              <img src="images/twitter.svg">
            </div>
          </div>
          <div class="matrixDescriptionTriat">
            <span>Trait Normalisation</span>
            <div class="toggle-switch">
              <input type="checkbox" id="chkTest" name="chkTest" <% if (useTraitNormalization == '1') { %> checked <% } %> >
              <label for="chkTest">
                <span class="toggle-track"></span>
              </label>
            </div>
          </div>
        </div>
      </div>
      <div class="matrixContent">
        <div class="matrixFilter">
          <h3 class="matrixFilterTitle">FILTER</h3>
          <div class="tabs">
            <%
            let currentTriat = '';
            allTraits.forEach(function(trait) { 
            %>
              <% 
              if (currentTriat != trait.trait_type) {
                if (currentTriat != '') {
                  %>
                  </div>
                  <%
                }
              %>
            <div class="tab">
              <input type="checkbox" id="chck_<%= trait.trait_type_id %>" />
              <label class="tab-label" for="chck_<%= trait.trait_type_id %>"><%= trait.trait_type %></label>
              <div class="tab-content">
                <input class="check" type="checkbox" name="">
                <label><%= trait.trait_detail_type %> (<%= trait.punk_count %>)</label>
              </div>
              <% 
                currentTriat = trait.trait_type;
              } else {
              %>
              <div class="tab-content">
                <input class="check" type="checkbox" name="">
                <label><%= trait.trait_detail_type %> (<%= trait.punk_count %>)</label>
              </div>
              <%
                }
                %>
              <%
              });
              %>
              <% if (!_.isEmpty(allTraits)) { %>
                </div>
              <% } %>
            
          </div>
        
        </div>
        <div class="matrixMain">
          <div>
            <select id="sorting-select" class="form-select1" name="order_by">
              <option value="rarity" <% if (orderBy=='rarity') { %> selected <% } %>>Sort By: Rarity</option>
              <option value="id" <% if (orderBy=='id') { %> selected <% } %>>Sort By: ID</option>
            </select>
          </div>
          <div class="matrixMainItem">
            <% if (!_.isEmpty(punks)) { %>
              <% punks.forEach(function(punk) { %>
                <div class="punk-component">
                  <%- include('./component/punk', {punk: punk, trait_normalization: useTraitNormalization, item_path_name:item_path_name}); -%>
                </div>
                <% }); %>
              <% } else { %>
              <h1 class="text-center">
                There's no result.
              </h1>
            <% } %>
          </div>
          <%- 
          include('./component/paginate', {
            totalPage: totalPage, 
            page: page, 
            path: '?search='+search+'&traits='+traits+'&trait_normalization='+useTraitNormalization+'&order_by='+orderBy,
            ogUrl:ogUrl
          }); 
          -%>
        </div>
        <%- include('./component/footer'); -%>
      </div>
    </div>
    <script type="text/javascript">
      
        
        window.addEventListener('DOMContentLoaded', () => {

        const traitSelects = document.querySelectorAll('.trait-select');

        function getSelectedTraits() {
          let selectedTraits = [];
          traitSelects.forEach(function(traitSelect) {
            if (!traitSelect.value.includes('_All')) {
              selectedTraits.push(traitSelect.value);
            }
          });
          return selectedTraits;
        }

        const sortingSelect = document.querySelector('#sorting-select');
      
        if (sortingSelect) {
          sortingSelect.addEventListener('change', async (event) => {
            const sorting = event.target.value;
            console.log(window.location.pathname)
            window.location = `${window.location.pathname.replace(/\/+$/, '')}?search=<%= search %>&traits=<%= traits %>&trait_normalization=<%= useTraitNormalization %>&order_by=`+sorting;
          });
        }

        const filterSelect = document.querySelectorAll('.trait-select');
        console.log(filterSelect)
        let selectValue = [];
        filterSelect.forEach((selectFilter) => {
          selectFilter.addEventListener('change', async (event) => {
            console.log(window.location.pathname)
            console.log(event.target.value)
            if (!event.target.value.includes('_All')) {
              // selectedTraits.push(traitSelect.value);
              window.location = window.location.pathname.replace(/\/+$/, '')+ "?search=<%= search %>&trait_normalization=<%= useTraitNormalization %>&order_by=<%= orderBy %>";
            }
            else {
              alert(event.target.value);
            }
          })
        })
        // filterSelect.addEventListener('change', async (event) => {
        //   const sorting = event.target.value;
        //   console.log(window.location.pathname)
        //   // window.location = `${window.location.pathname.replace(/\/+$/, '')}?search=<%= search %>&traits=<%= traits %>&trait_normalization=<%= useTraitNormalization %>&order_by=`+sorting;
        // });


      const traitNormalizationSwitch = document.querySelector('#chkTest');
        if (traitNormalizationSwitch) {
          traitNormalizationSwitch.addEventListener('change', async (event) => {
            const useTraitNormalization = event.target.checked;
            if (useTraitNormalization) {
              window.location = window.location.pathname.replace(/\/+$/, '') +"?search=<%= search %>&traits=<%= traits %>&trait_normalization=1&order_by=<%= orderBy %>";
            } else {
              window.location = window.location.pathname.replace(/\/+$/, '') + "?search=<%= search %>&traits=<%= traits %>&trait_normalization=0&order_by=<%= orderBy %>";
            }
          });
        }
      });

        var acc = document.getElementsByClassName("accordion");
var i;

for (i = 0; i < acc.length; i++) {
  acc[i].addEventListener("click", function() {
    this.classList.toggle("active");
    var panel = this.nextElementSibling;
    if (panel.style.maxHeight) {
      panel.style.maxHeight = null;
    } else {
      panel.style.maxHeight = panel.scrollHeight + "px";
    } 
  });
}
    </script>
  </body>
</html>